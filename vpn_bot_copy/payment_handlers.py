import os
import json
import hashlib
import hmac
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import ContextTypes

class PaymentHandler:
    def __init__(self, db):
        self.db = db
        self.payment_token = os.getenv('PAYMENT_TOKEN')
        self.yookassa_shop_id = os.getenv('YOOKASSA_SHOP_ID')
        self.yookassa_secret = os.getenv('YOOKASSA_SECRET_KEY')
    
    async def create_payment(self, query, context, tariff_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞"""
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
        tariffs = self.db.get_tariffs()
        tariff = next((t for t in tariffs if t['id'] == tariff_id), None)
        
        if not tariff:
            await query.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        title = f"VPN –ø–æ–¥–ø–∏—Å–∫–∞: {tariff['name']}"
        description = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {tariff['duration_days']} –¥–Ω–µ–π"
        payload = f"tariff_{tariff_id}_{user_id}_{int(datetime.now().timestamp())}"
        
        # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        price = int(tariff['price'] * 100)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
        keyboard = [
            [InlineKeyboardButton("üí≥ Telegram Pay", callback_data=f"pay_telegram_{tariff_id}")],
            [InlineKeyboardButton("üí∞ YooKassa", callback_data=f"pay_yookassa_{tariff_id}")],
            [InlineKeyboardButton("üîó –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data=f"pay_crypto_{tariff_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="buy_vpn")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = f"""üí≥ **–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏**

üì¶ –¢–∞—Ä–∏—Ñ: {tariff['name']}
‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tariff['duration_days']} –¥–Ω–µ–π
üí∞ –¶–µ–Ω–∞: {tariff['price']} ‚ÇΩ

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"""
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def telegram_payment(self, query, context, tariff_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Payments"""
        if not self.payment_token:
            await query.answer("‚ùå Telegram Payments –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", show_alert=True)
            return
        
        user_id = query.from_user.id
        tariffs = self.db.get_tariffs()
        tariff = next((t for t in tariffs if t['id'] == tariff_id), None)
        
        if not tariff:
            await query.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        title = f"VPN –ø–æ–¥–ø–∏—Å–∫–∞: {tariff['name']}"
        description = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {tariff['duration_days']} –¥–Ω–µ–π"
        payload = f"tariff_{tariff_id}_{user_id}"
        currency = "RUB"
        price = int(tariff['price'] * 100)  # –í –∫–æ–ø–µ–π–∫–∞—Ö
        
        prices = [LabeledPrice(title, price)]
        
        await context.bot.send_invoice(
            chat_id=query.message.chat_id,
            title=title,
            description=description,
            payload=payload,
            provider_token=self.payment_token,
            currency=currency,
            prices=prices,
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            send_phone_number_to_provider=False,
            send_email_to_provider=False,
            is_flexible=False
        )

    async def yookassa_payment(self, query, context, tariff_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ YooKassa"""
        if not self.yookassa_shop_id or not self.yookassa_secret:
            await query.answer("‚ùå YooKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", show_alert=True)
            return
        
        user_id = query.from_user.id
        tariffs = self.db.get_tariffs()
        tariff = next((t for t in tariffs if t['id'] == tariff_id), None)
        
        if not tariff:
            await query.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å YooKassa API
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Å—ã–ª–∫—É
        payment_url = f"https://yoomoney.ru/quickpay/shop-widget?writer=seller&targets=VPN%20{tariff['name']}&targets-hint=&default-sum={tariff['price']}&button-text=11&payment-type-choice=on&mobile-payment-type-choice=on&hint=&successURL=&quickpay=shop&account={self.yookassa_shop_id}"
        
        keyboard = [
            [InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_payment_{tariff_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"pay_tariff_{tariff_id}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = f"""üí∞ **–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ YooMoney**

üì¶ –¢–∞—Ä–∏—Ñ: {tariff['name']}
üí∞ –¶–µ–Ω–∞: {tariff['price']} ‚ÇΩ

1. –ù–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å"
2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–ª–∞—Ç–µ–∂
3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª"

‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞."""
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def crypto_payment(self, query, context, tariff_id):
        """–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π"""
        tariffs = self.db.get_tariffs()
        tariff = next((t for t in tariffs if t['id'] == tariff_id), None)
        
        if not tariff:
            await query.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å API)
        btc_rate = 6500000  # BTC –≤ —Ä—É–±–ª—è—Ö
        usdt_rate = 92  # USDT –≤ —Ä—É–±–ª—è—Ö
        
        btc_amount = tariff['price'] / btc_rate
        usdt_amount = tariff['price'] / usdt_rate
        
        keyboard = [
            [InlineKeyboardButton("‚Çø Bitcoin", callback_data=f"crypto_btc_{tariff_id}")],
            [InlineKeyboardButton("üíé USDT", callback_data=f"crypto_usdt_{tariff_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"pay_tariff_{tariff_id}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = f"""‚Çø **–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π**

üì¶ –¢–∞—Ä–∏—Ñ: {tariff['name']}
üí∞ –¶–µ–Ω–∞: {tariff['price']} ‚ÇΩ

üí∞ –ö—É—Ä—Å—ã:
‚Çø Bitcoin: {btc_amount:.8f} BTC
üíé USDT: {usdt_amount:.2f} USDT

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:"""
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def process_successful_payment(self, user_id, tariff_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        tariffs = self.db.get_tariffs()
        tariff = next((t for t in tariffs if t['id'] == tariff_id), None)
        
        if not tariff:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        subscription_id = self.db.add_subscription(
            user_id=user_id,
            subscription_name=tariff['name'],
            subscription_type="premium",
            duration_days=tariff['duration_days']
        )
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é VPN –∫–ª—é—á–∞
        # vpn_config = self.generate_vpn_config(user_id, subscription_id)
        
        return True

    async def check_payment(self, query, context, tariff_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
        user_id = query.from_user.id
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        
        success = await self.process_successful_payment(user_id, tariff_id)
        
        if success:
            tariffs = self.db.get_tariffs()
            tariff = next((t for t in tariffs if t['id'] == tariff_id), None)
            
            text = f"""‚úÖ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**

üéâ –ü–æ–¥–ø–∏—Å–∫–∞ "{tariff['name']}" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {tariff['duration_days']} –¥–Ω–µ–π

üîë –í–∞—à–∏ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üíù"""
            
            keyboard = [
                [InlineKeyboardButton("üîë –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

    def generate_payment_hash(self, data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
        if not self.yookassa_secret:
            return None
        
        message = "&".join([f"{k}={v}" for k, v in sorted(data.items())])
        return hmac.new(
            self.yookassa_secret.encode(),
            message.encode(),
            hashlib.sha1
        ).hexdigest()

    async def handle_pre_checkout_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ Telegram"""
        query = update.pre_checkout_query
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º payload
        if query.invoice_payload.startswith("tariff_"):
            await query.answer(ok=True)
        else:
            await query.answer(ok=False, error_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂")

    async def handle_successful_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ Telegram"""
        payment = update.message.successful_payment
        payload = payment.invoice_payload
        
        if payload.startswith("tariff_"):
            parts = payload.split("_")
            tariff_id = int(parts[1])
            user_id = int(parts[2])
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            success = await self.process_successful_payment(user_id, tariff_id)
            
            if success:
                tariffs = self.db.get_tariffs()
                tariff = next((t for t in tariffs if t['id'] == tariff_id), None)
                
                await update.message.reply_text(
                    f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ü–æ–¥–ø–∏—Å–∫–∞ '{tariff['name']}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
                    f"üîë –í–∞—à–∏ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'."
                )