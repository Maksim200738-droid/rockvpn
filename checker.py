import logging
import os
import json
import requests
from datetime import datetime
from database import Database
from dotenv import load_dotenv
import time

load_dotenv()

class SubscriptionChecker:
    def __init__(self):
        self.db = Database()
        self.panel_url = os.getenv('PANEL_URL')
        self.username = os.getenv('PANEL_USERNAME')
        self.password = os.getenv('PANEL_PASSWORD')
        self.session = requests.Session()
        self.login()

    def login(self):
        try:
            login_data = {
                'username': self.username,
                'password': self.password
            }
            response = self.session.post(f"{self.panel_url}/login", json=login_data)
            if response.status_code != 200:
                print("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å")
                raise Exception("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å")
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –ø–∞–Ω–µ–ª—å")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {str(e)}")
            raise

    def check_client_exists(self, client_id, inbound_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø–∞–Ω–µ–ª–∏"""
        try:
            response = self.session.get(f"{self.panel_url}/panel/api/inbounds/get/{inbound_id}")
            if response.status_code != 200:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ inbound {inbound_id}")
                return False

            inbound_data = response.json()['obj']
            settings = json.loads(inbound_data['settings'])
            
            exists = any(client.get('id') == client_id for client in settings['clients'])
            if exists:
                print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client_id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå –ö–ª–∏–µ–Ω—Ç {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return exists
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {str(e)}")
            return False

    def deactivate_client(self, client_id, inbound_id):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø–∞–Ω–µ–ª–∏"""
        try:
            print(f"\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            if not self.check_client_exists(client_id, inbound_id):
                print(f"‚ÑπÔ∏è –ö–ª–∏–µ–Ω—Ç {client_id} —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω")
                return True

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ inbound
            print(f"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ inbound {inbound_id}...")
            response = self.session.get(f"{self.panel_url}/panel/api/inbounds/get/{inbound_id}")
            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ inbound {inbound_id}")
                return False

            inbound_data = response.json()['obj']
            settings = json.loads(inbound_data['settings'])
            
            # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞...")
            settings['clients'] = [client for client in settings['clients'] 
                                 if client.get('id') != client_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            print(f"üì§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ inbound...")
            inbound_data['settings'] = json.dumps(settings)
            response = self.session.post(
                f"{self.panel_url}/panel/api/inbounds/update/{inbound_id}",
                json=inbound_data
            )
            
            if response.status_code == 200:
                print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ inbound")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {str(e)}")
            return False

    def check_all_subscriptions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ"""
        try:
            self.db.ensure_connected()
            cursor = self.db.conn.cursor()
            
            current_time = datetime.now()
            print(f"\n‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ [{current_time.strftime('%d.%m.%Y %H:%M:%S')}]")
            print("-------------------")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫...")
            query = """
                SELECT 
                    s.*,
                    COALESCE(NULLIF(u.username, ''), 'Unknown') as username,
                    u.user_id
                FROM subscriptions s
                LEFT JOIN users u ON s.user_id = u.user_id
                WHERE s.is_active = 1
            """
            cursor.execute(query)
            subscriptions = cursor.fetchall()
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(subscriptions)}")
            print("-------------------")
            
            for sub in subscriptions:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
                    end_date = datetime.fromisoformat(sub['end_date'])
                    
                    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:")
                    print(f"   ‚Ä¢ ID –ø–æ–¥–ø–∏—Å–∫–∏: {sub['id']}")
                    print(f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{sub['username']}")
                    print(f"   ‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {sub['user_id']}")
                    print(f"   ‚Ä¢ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date.strftime('%d.%m.%Y %H:%M')}")
                    print(f"   ‚Ä¢ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time.strftime('%d.%m.%Y %H:%M')}")
                    
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã —Å —É—á–µ—Ç–æ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
                    if end_date > current_time:
                        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞")
                        print("-------------------")
                        continue

                    print(f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞")

                    # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                    try:
                        print("üì¶ –ü–∞—Ä—Å–∏–Ω–≥ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
                        vpn_config = json.loads(sub['vpn_config'])
                        inbound_id = vpn_config.get('inbound_id')
                        if not inbound_id:
                            raise ValueError("inbound_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                            
                        client_id = sub['client_id']
                        if not client_id:
                            raise ValueError("client_id –Ω–µ –Ω–∞–π–¥–µ–Ω")

                        print(f"üîÑ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –∏–∑ inbound {inbound_id}...")
                        if self.deactivate_client(client_id, inbound_id):
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                            print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
                            cursor.execute("""
                                UPDATE subscriptions 
                                SET is_active = 0 
                                WHERE id = ?
                            """, (sub['id'],))
                            self.db.conn.commit()
                            
                            print("\nüî¥ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞:")
                            print(f"   ‚Ä¢ ID –ø–æ–¥–ø–∏—Å–∫–∏: {sub['id']}")
                            print(f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{sub['username']}")
                            print(f"   ‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {sub['user_id']}")
                            print(f"   ‚Ä¢ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date.strftime('%d.%m.%Y %H:%M')}")
                            print(f"   ‚Ä¢ –í—Ä–µ–º—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {current_time.strftime('%d.%m.%Y %H:%M')}")
                        else:
                            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø–∞–Ω–µ–ª–∏")
                            
                    except (json.JSONDecodeError, ValueError) as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                        print(f"üìù –û—Ç–º–µ—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é...")
                        cursor.execute("""
                            UPDATE subscriptions 
                            SET is_active = 0 
                            WHERE id = ?
                        """, (sub['id'],))
                        self.db.conn.commit()
                        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {sub['id']} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è")
                    
                    print("-------------------")

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ {sub['id']}: {str(e)}")
                    print("-------------------")
                    continue

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: {str(e)}")
            print("-------------------")

def main():
    print("\nüöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫")
    print("‚ö° –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("üìù –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("-------------------")
    
    while True:
        try:
            checker = SubscriptionChecker()
            checker.check_all_subscriptions()
            print("\nüí§ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
        except KeyboardInterrupt:
            print("\n‚õî –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            print("-------------------")
            time.sleep(10)

if __name__ == "__main__":
    main()
